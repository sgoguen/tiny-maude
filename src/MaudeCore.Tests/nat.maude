fmod NAT is
    sort Nat .
    var N : Nat .
    var M : Nat .

    op z : -> Nat .
    op s_ : Nat -> Nat .

    op p : Nat Nat -> Nat .
    op m : Nat Nat -> Nat .
    op w : Nat Nat -> Nat .
    op sq : Nat -> Nat .

    eq p (N, z) = N .
    eq p (N, s M) = s (p (N, M)) .

    eq m (N, z) = z .
    eq m (N, s z) = N .
    eq m (N, s M) = p (N, m (N, M)) .

    eq w (N, z) = s z .
    eq w (N, s M) = m (N, w (N, M)) .

    eq sq (M) = m (M, M) .
endfm

set trace on .

--- reduce p (M, M) . 
--- result Nat: p(M, M)

--- reduce p ( s (s (s z)), s (s (s z))) . 
--- result Nat: s s s s s s z

reduce m ( s s z, s s z) .

--- reduce in NAT : m(s s z, s s z) .
--- *********** equation
--- eq m(N, s M) = p(N, m(N, M)) .
--- N --> s s z
--- M --> s z
--- m(s s z, s s z)
--- --->
--- p(s s z, m(s s z, s z))
--- *********** equation
--- eq m(N, s z) = N .
--- N --> s s z
--- m(s s z, s z)
--- --->
--- s s z
--- *********** equation
--- eq p(N, s M) = s p(N, M) .
--- N --> s s z
--- M --> s z
--- p(s s z, s s z)
--- --->
--- s p(s s z, s z)
--- *********** equation
--- eq p(N, s M) = s p(N, M) .
--- N --> s s z
--- M --> z
--- p(s s z, s z)
--- --->
--- s p(s s z, z)
--- *********** equation
--- eq p(N, z) = N .
--- N --> s s z
--- p(s s z, z)
--- --->
--- s s z
--- rewrites: 5 in 0ms cpu (0ms real) (128205 rewrites/second)
--- result Nat: s s s s z

quit